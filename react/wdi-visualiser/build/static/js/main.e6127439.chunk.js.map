{"version":3,"sources":["images/world_bank.png","components/Header.js","actions/displayActions.js","components/visualisers/LinearRegressionVisualiser.js","components/visualisers/RFClassifierVisualiser.js","components/visualisers/NNClassifierVisualiser.js","components/visualisers/RFRegressionVisualiser.js","components/ResultsVisualiser.js","actions/modelActions.js","components/selectors/MachineLearningTypeSelector.js","components/selectors/DependentVariableSelector.js","components/selectors/IndependentVariableSelector.js","components/selectors/CountrySelector.js","components/selectors/YearSelector.js","components/selectors/ml_specific/LinearRegressionVars.js","components/selectors/ml_specific/RFClassifierVars.js","components/selectors/ml_specific/NNClassifierVars.js","components/selectors/ml_specific/RFRegressionVars.js","components/selectors/ModelSpecificParamSelector.js","components/QueryBuilder.js","actions/searchActions.js","components/Searcher.js","App.js","actions/mappingActions.js","serviceWorker.js","reducers/mappingReducer.js","reducers/modelReducer.js","reducers/displayReducer.js","reducers/searchReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["module","exports","Header","className","onClick","this","props","showBuilder","showResults","showModelSearch","Component","connect","state","current_page","display","dispatch","type","ResultsVisualiser","id","indicator_mappings","results","dep_var","indep_vars","map","v","src","img_data","countries","c","country_mappings","start_year","end_year","Object","entries","ml_specific","param","value","ml_mappings","mappings","reversed_mappings","ml_types","indicators","importances","i","length","push","toFixed","row","key","col","j","ml_type","LinearRegressionVisualiser","RFClassifierVisualiser","RFRegressionVisualiser","NNClassifierVisualiser","renderSwitch","model","updateMLParams","target","update","payload","updateModel","MachineLearningTypeSelector","selectedItem","mlTypeChange","options","keys","onSelect","updateSelection","bind","onRemove","isObject","placeholder","singleSelect","DepVarSelector","selectionLimit","IndepVarSelector","selectedList","newlist","item","CountrySelector","checked","handleChangeChk","setState","values","showCheckbox","onChange","sliderStyle","position","width","height","border","railStyle","marginTop","borderRadius","backgroundColor","Handle","handle","percent","getHandleProps","style","left","marginLeft","zIndex","textAlign","cursor","color","fontFamily","fontSize","Track","source","getTrackProps","Tick","tick","count","YearSelector","years","rootStyle","domain","step","mode","getRailProps","handles","right","tracks","ticks","LinearRegressionVars","RFClassifierVars","num_classes","tree_depth","handleChange","event","parseInt","handleSubmit","preventDefault","console","log","onSubmit","blank","hidden_layers","nodes_hidden_layers","num_trees","ModelSpecificSelector","RFRegressionVars","NNClassifierVars","QueryBuilder","name","handleSearchClick","waitingForML","axios","post","ml_params","then","response","updateSearchResults","data","notWaiting","error","logo","alt","mappings_received","DependentVariableSelector","IndependentVariableSelector","ModelSpecificParamSelector","waiting_for_ml","handleBuildClick","Searcher","handleClick","resultsPreview","query","search_results","_id","val","search","App","fetchMappings","waitingMappings","get","addMappings","mlTypes","addRevMappings","revCountries","revIndicators","revMLTypes","receivedMappings","model_received","Boolean","window","location","hostname","match","initialState","mappingReducer","action","modelReducer","displayReducer","searchReducer","combineReducers","store","createStore","rootReducer","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e6127439.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world_bank.a6d703ac.png\";","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { showResults, showModelSearch, showBuilder } from '../actions/displayActions';\r\n\r\nimport '../css/Header.css'\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n      return (\r\n        <div className='Header-component'>\r\n            <div className='builderDiv' onClick={this.props.showBuilder}>Builder!</div>\r\n\r\n            <div className='resultsDiv' onClick={this.props.showResults}>Results!</div>\r\n\r\n            <div className='mlSearchDiv' onClick={this.props.showModelSearch}>Search!</div>\r\n            \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      current_page: state.display.display\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      showModelSearch: () => dispatch(showModelSearch()),\r\n      showResults: () => dispatch(showResults()),\r\n      showBuilder: () => dispatch(showBuilder())\r\n    }\r\n  }\r\n   \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Header);","export const showBuilder = () => {\r\n    return { type: \"SHOW_QUERY_BUILDER\" }\r\n}\r\n\r\nexport const showResults = () => {\r\n    return { type: \"SHOW_RESULTS\" }\r\n}\r\n\r\nexport const showModelSearch = () => {\r\n    return { type: \"SHOW_MODEL_SEARCH\" }\r\n}\r\n\r\n","import React, {Component} from 'react'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass ResultsVisualiser extends Component {    \r\n\r\n    // render the results for linear regression - results passed in on props\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className='visualiser-header'><h2>Linear Regression Model</h2></div>\r\n            <br/>\r\n\r\n            <div className='model-details'>\r\n            <div className='model-details-vars-div'>\r\n                <h2>Variables</h2>\r\n                <i>Trying to predict</i> &nbsp; <br/> \r\n                <strong>{this.props.indicator_mappings[this.props.results.dep_var]}</strong> \r\n                <br/> <i>using</i> <br/> \r\n                {this.props.results.indep_vars.map( (v) => (\r\n                    <div>> {this.props.indicator_mappings[v]}, </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className='all-results-div'>\r\n                <h2>Results</h2>\r\n                <div className='numeric-results-div'>\r\n                <div>The R squared value of the model is {this.props.results[\"R Squared\"]} . </div>\r\n                {/* Add in more results here to make the exploration better */}\r\n                </div>\r\n                <br/>\r\n\r\n                \r\n                <div className='image-results-div'>\r\n                {/* Put in the decoded image from the json file  --  have img_data be part of the results*/}\r\n                <img src={`data:image/jpeg;base64,${this.props.results.img_data}`} />\r\n                </div>\r\n            </div>\r\n\r\n            </div>\r\n\r\n            <br/>\r\n            <br/>\r\n\r\n            <div className='model-details-other-div'> \r\n                <i><h3>The full details of the dataset used can be seen below:</h3></i>\r\n                <div className='countries-div'>\r\n                    <h3>Countries</h3>\r\n                    {this.props.results.countries.map( (c) => (\r\n                        <div>{this.props.country_mappings[c]}, </div>\r\n                    ))}\r\n                </div>\r\n                <div className='years-div'>\r\n                    <h3>Other details</h3>\r\n                    <div>The data was sampled between the years of {this.props.results.start_year} and {this.props.results.end_year}.</div>\r\n                    <br/><br/>\r\n                    <div>\r\n                        The model was built with the following non default parameters: <br/>\r\n                        -- Linear Regression has no params to specify --\r\n                        {Object.entries(this.props.results.ml_specific).map(([param, value]) => {\r\n                            return <div>{param}: &nbsp; {value}</div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ml_mappings: state.mappings.reversed_mappings.ml_types,\r\n        country_mappings: state.mappings.reversed_mappings.countries,\r\n        indicator_mappings: state.mappings.reversed_mappings.indicators\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ResultsVisualiser);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass ResultsVisualiser extends Component {    \r\n\r\n    // render the results for Random forest classification - results passed in on props\r\n    // To do make a component to handle outputting the confusion matrix more nicely?\r\n    render() {    \r\n\r\n        // make the importances list/obj\r\n        let importances = []\r\n        for (let i=0; i < this.props.results[\"feature_importances\"][0].length; i++) {\r\n            importances.push(\r\n            <div>\r\n                <strong>{this.props.indicator_mappings[this.props.results[\"feature_importances\"][1][i]]}</strong>: &nbsp; \r\n                {this.props.results[\"feature_importances\"][0][i].toFixed(3)}\r\n            </div>\r\n            )}\r\n\r\n        return (\r\n\r\n            <div id='main-area'>\r\n            <div className='visualiser-header'><h2>Random Forest Classification Model</h2></div>\r\n            <br/>\r\n\r\n            <div className='model-details'>\r\n            <div className='model-details-vars-div'>\r\n                <h2>Variables</h2>\r\n                <i>Trying to predict</i> &nbsp; <br/> \r\n                <strong>{this.props.indicator_mappings[this.props.results.dep_var]}</strong> \r\n                <br/> <i>using</i> <br/> \r\n                {this.props.results.indep_vars.map( (v) => (\r\n                    <div>> {this.props.indicator_mappings[v]}, </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className='all-results-div'>\r\n                {/* Make the two types of results divs go side by side */}\r\n                <div className='numeric-results-div'>\r\n                The prediction accuracy of the model is {this.props.results[\"accuracy\"]} .\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    With the following confusion matrix:\r\n                    {this.props.results[\"conf_matrix\"].map((row, i) => (\r\n                    <div key={i}>\r\n                        {row.map((col, j) => (\r\n                        <span key={j}>| {col} |</span>\r\n                        ))}\r\n                    </div>\r\n                    ))}\r\n                </div>\r\n                \r\n                <br/>\r\n                <div>\r\n                    The factors have the following importances:\r\n                    {importances}\r\n                </div>\r\n\r\n                <div className='image-results-div'>\r\n                {/* Put in the decoded image from the json file  --  have img_data be part of the results*/}\r\n                <img src={`data:image/jpeg;base64,${this.props.results.img_data}`} />\r\n                </div>\r\n            </div>\r\n\r\n            </div>\r\n\r\n            <br/>\r\n            <br/>\r\n\r\n            <div className='model-details-other-div'> \r\n                <i><h3>The full details of the dataset used can be seen below:</h3></i>\r\n                <div className='countries-div'>\r\n                    <h3>Countries</h3>\r\n                    {this.props.results.countries.map( (c) => (\r\n                        <div>{this.props.country_mappings[c]}, </div>\r\n                    ))}\r\n                </div>\r\n                <div className='years-div'>\r\n                    <h3>Other details</h3>\r\n                    <div>The data was sampled between the years of {this.props.results.start_year} and {this.props.results.end_year}.</div>\r\n                    <br/><br/>\r\n                    <div>\r\n                        The model was built with the following non default parameters: <br/>\r\n                        {Object.entries(this.props.results.ml_specific).map(([param, value]) => {\r\n                            return <div>{param}: &nbsp; {value}</div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ml_mappings: state.mappings.reversed_mappings.ml_types,\r\n        country_mappings: state.mappings.reversed_mappings.countries,\r\n        indicator_mappings: state.mappings.reversed_mappings.indicators\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ResultsVisualiser);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass ResultsVisualiser extends Component {    \r\n\r\n    // render the results for linear regression - results passed in on props\r\n    render() {    \r\n        \r\n            return (\r\n            <div id='main-area'>\r\n                <div className='visualiser-header'><h2>Neural Network Classification Model</h2></div>\r\n                <br/>\r\n    \r\n                <div className='model-details'>\r\n                <div className='model-details-vars-div'>\r\n                    <h2>Variables</h2>\r\n                    <i>Trying to predict</i> &nbsp; <br/> \r\n                    <strong>{this.props.indicator_mappings[this.props.results.dep_var]}</strong> \r\n                    <br/> <i>using</i> <br/> \r\n                    {this.props.results.indep_vars.map( (v) => (\r\n                        <div>> {this.props.indicator_mappings[v]}, </div>\r\n                    ))}\r\n                </div>\r\n    \r\n                <div className='all-results-div'>\r\n                    <h2>Results</h2>\r\n                    <div className='numeric-results-div'>\r\n                    The prediction accuracy of the model is {this.props.results[\"accuracy\"]} .\r\n                    </div>\r\n                <br/>\r\n                    <div>\r\n                        With the following confusion matrix:\r\n                        {this.props.results[\"conf_matrix\"].map((row, i) => (\r\n                        <div key={i}>\r\n                            {row.map((col, j) => (\r\n                            <span key={j}>| {col} |</span>\r\n                            ))}\r\n                        </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                <br/>\r\n\r\n                    <div>Other details about Neural Network Classification model in here</div>\r\n\r\n                \r\n                    <div className='image-results-div'>\r\n                    {/* Put in the decoded image from the json file  --  have img_data be part of the results*/}\r\n                    <img src={`data:image/jpeg;base64,${this.props.results.img_data}`} />\r\n                    </div>\r\n                </div>\r\n    \r\n                </div>\r\n    \r\n                <br/>\r\n                <br/>\r\n    \r\n                <div className='model-details-other-div'> \r\n                    <i><h3>The full details of the dataset used can be seen below:</h3></i>\r\n                    <div className='countries-div'>\r\n                        <h3>Countries</h3>\r\n                        {this.props.results.countries.map( (c) => (\r\n                            <div>{this.props.country_mappings[c]}, </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className='years-div'>\r\n                        <h3>Other details</h3>\r\n                        <div>The data was sampled between the years of {this.props.results.start_year} and {this.props.results.end_year}.</div>\r\n                        <br/><br/>\r\n                        <div>\r\n                            The model was built with the following non default parameters: <br/>\r\n                            {Object.entries(this.props.results.ml_specific).map(([param, value]) => {\r\n                                return <div>{param}: &nbsp; {value}</div>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            );\r\n        }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ml_mappings: state.mappings.reversed_mappings.ml_types,\r\n        country_mappings: state.mappings.reversed_mappings.countries,\r\n        indicator_mappings: state.mappings.reversed_mappings.indicators\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ResultsVisualiser);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass ResultsVisualiser extends Component {    \r\n\r\n    // render the results for linear regression - results passed in on props\r\n    render() {    \r\n        return (\r\n\r\n            <div id='main-area'>\r\n            <div className='visualiser-header'><h2>Random Forest Regression Model</h2></div>\r\n            <br/>\r\n\r\n            <div className='model-details'>\r\n            <div className='model-details-vars-div'>\r\n                <h2>Variables</h2>\r\n                <i>Trying to predict</i> &nbsp; <br/> \r\n                <strong>{this.props.indicator_mappings[this.props.results.dep_var]}</strong> \r\n                <br/> <i>using</i> <br/> \r\n                {this.props.results.indep_vars.map( (v) => (\r\n                    <div>> {this.props.indicator_mappings[v]}, </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className='all-results-div'>\r\n                {/* Make the two types of results divs go side by side */}\r\n                <div className='numeric-results-div'>\r\n                The R squared value of the model is {this.props.results[\"R Squared\"]} .\r\n                </div>\r\n                <br/>\r\n\r\n                <div>Other details about random forest regression model in here</div>\r\n\r\n                \r\n                <div className='image-results-div'>\r\n                {/* Put in the decoded image from the json file  --  have img_data be part of the results*/}\r\n                <img src={`data:image/jpeg;base64,${this.props.results.img_data}`} />\r\n                </div>\r\n            </div>\r\n\r\n            </div>\r\n\r\n            <br/>\r\n            <br/>\r\n\r\n            <div className='model-details-other-div'> \r\n                <i><h3>The full details of the dataset used can be seen below:</h3></i>\r\n                <div className='countries-div'>\r\n                    <h3>Countries</h3>\r\n                    {this.props.results.countries.map( (c) => (\r\n                        <div>{this.props.country_mappings[c]}, </div>\r\n                    ))}\r\n                </div>\r\n                <div className='years-div'>\r\n                    <h3>Other details</h3>\r\n                    <div>The data was sampled between the years of {this.props.results.start_year} and {this.props.results.end_year}.</div>\r\n                    <br/><br/>\r\n                    <div>\r\n                        The model was built with the following parameters: <br/>\r\n                        {Object.entries(this.props.results.ml_specific).map(([param, value]) => {\r\n                            return <div>{param}: &nbsp; {value}</div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ml_mappings: state.mappings.reversed_mappings.ml_types,\r\n        country_mappings: state.mappings.reversed_mappings.countries,\r\n        indicator_mappings: state.mappings.reversed_mappings.indicators\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ResultsVisualiser);","import React, {Component} from 'react'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\n// actions (?)\r\nimport { showBuilder } from '../actions/displayActions'\r\n\r\nimport LinearRegressionVisualiser from './visualisers/LinearRegressionVisualiser'\r\nimport RFClassifierVisualiser from './visualisers/RFClassifierVisualiser'\r\nimport NNClassifierVisualiser from './visualisers/NNClassifierVisualiser'\r\nimport RFRegressionVisualiser from './visualisers/RFRegressionVisualiser'\r\n\r\nimport '../css/ResultsVisualiser.css'\r\n\r\nclass ResultsVisualiser extends Component {\r\n\r\n    // conditionally render based on type of ML done\r\n    renderSwitch(ml_type) {\r\n        switch(ml_type) {\r\n            case 'lin_regression':\r\n                return <LinearRegressionVisualiser results={this.props.results}/>;\r\n\r\n            case 'rf_classifier':\r\n                return <RFClassifierVisualiser results={this.props.results}/>;\r\n\r\n            case 'rf_regression':\r\n                return <RFRegressionVisualiser results={this.props.results}/>;\r\n\r\n            case 'nn_classifier':\r\n                return <NNClassifierVisualiser results={this.props.results}/>;\r\n\r\n            default:\r\n                return <div className=\"error-div\">You currently have no ML model selected. Either build or search for one!</div>;\r\n        }\r\n    }\r\n\r\n    // render the results output once its received from backend - results passed in on props\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className='header-space'/>\r\n            {this.renderSwitch(this.props.ml_type)}\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      results: state.model.results,\r\n      ml_type: state.model.type\r\n    }\r\n  }\r\n\r\n// have a dispatch under like miscellaneous -> switch between builder and current results\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      showBuilder: () => dispatch(showBuilder())\r\n    }\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsVisualiser);","export const updateMLParams = (target, update) => {\r\n    return {\r\n    type: \"CHANGE_ML_PARAMS\",\r\n    payload: {\r\n        target: target,\r\n        value: update\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateModel = (model) => {\r\n    return {\r\n        type: \"UPDATE_MODEL\",\r\n        payload: {\r\n            results: model,\r\n            type: model.type\r\n        }\r\n    }\r\n}\r\n\r\nexport const waitingForML = () => {\r\n    return {\r\n        type: \"WAITING_FOR_MODEL\"\r\n    }\r\n}\r\n\r\nexport const notWaiting = () => {\r\n    return {\r\n        type: \"NOT_WAITING\"\r\n    }\r\n}\r\n\r\nexport const mlTypeChange = () => {\r\n    return {\r\n        type: \"ML_TYPE_CHANGE\"\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\n// actions\r\nimport { updateMLParams, mlTypeChange } from '../../actions/modelActions';\r\n\r\nclass MachineLearningTypeSelector extends Component {\r\n\r\n    updateSelection(selectedItem) {\r\n        // update the ml type (1st dispatch) then reset ml_specific params (2nd)\r\n        this.props.updateMLParams(\"ml_type\", this.props.ml_types[selectedItem])\r\n        this.props.mlTypeChange()\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            The current model type is: \r\n            <br/>\r\n            <Multiselect\r\n            options={Object.keys(this.props.ml_types)}\r\n            onSelect={this.updateSelection.bind(this)}\r\n            onRemove={this.updateSelection.bind(this)}\r\n            isObject={false}\r\n            placeholder=\"Select ML technique...\"\r\n            singleSelect={true}\r\n            />\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      ml_types: state.mappings.mappings.ml_types\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n      mlTypeChange: () => dispatch(mlTypeChange())\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MachineLearningTypeSelector)","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../actions/modelActions';\r\n\r\nclass DepVarSelector extends Component {\r\n\r\n    updateSelection(selectedItem) { \r\n        this.props.updateMLParams(\"dep_var\", this.props.indicators[selectedItem])\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className=\"header\">Select the <i>dependant</i> variable</div>\r\n            <Multiselect\r\n            options={Object.keys(this.props.indicators)}\r\n            onSelect={this.updateSelection.bind(this)}\r\n            onRemove={this.updateSelection.bind(this)}\r\n            isObject={false}\r\n            placeholder=\"Search Variables...\"\r\n            selectionLimit={1}\r\n            />\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      indicators: state.mappings.mappings.indicators\r\n    }\r\n  }\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    }\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DepVarSelector);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../actions/modelActions';\r\n\r\nclass IndepVarSelector extends Component {\r\n\r\n    updateSelection(selectedList) {\r\n        let newlist = selectedList.map( item => {\r\n            return this.props.indicators[item]\r\n        })\r\n        this.props.updateMLParams(\"indep_vars\", newlist)\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className=\"header\">Select the independant variables</div>\r\n\r\n            <Multiselect\r\n            options={Object.keys(this.props.indicators)}\r\n            onSelect={this.updateSelection.bind(this)}\r\n            onRemove={this.updateSelection.bind(this)}\r\n            isObject={false}\r\n            placeholder=\"Search Variables...\"\r\n            />\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      indicators: state.mappings.mappings.indicators\r\n    }\r\n  }\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndepVarSelector);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport Switch from 'react-switch';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../actions/modelActions';\r\n\r\nclass CountrySelector extends Component {\r\n\r\n    state = {checked: false}\r\n\r\n    updateSelection(selectedList) {\r\n        let newlist = selectedList.map( item => {\r\n            return this.props.countries[item]\r\n        })\r\n        this.props.updateMLParams(\"countries\", newlist)\r\n    }\r\n\r\n    handleChangeChk = () => {\r\n        this.setState({checked: !this.state.checked}, () => {\r\n            this.state.checked ? \r\n            this.props.updateMLParams(\"countries\", Object.values(this.props.countries)) \r\n            : \r\n            this.props.updateMLParams(\"countries\", [])\r\n            // reset the selection in the component\r\n        })\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n        <div className='CountrySelect'>\r\n            <div className=\"header\">Select the countries <small>- toggle switch for all</small></div>\r\n            <Multiselect\r\n            className=\"CountryMultiSelect\"\r\n            options={Object.keys(this.props.countries)}\r\n            onSelect={this.updateSelection.bind(this)}\r\n            onRemove={this.updateSelection.bind(this)}\r\n            isObject={false}\r\n            placeholder=\"Search Countries...\"\r\n            showCheckbox={true}\r\n            />\r\n\r\n            <Switch onChange={this.handleChangeChk} checked={this.state.checked} />\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        countries: state.mappings.mappings.countries\r\n    }\r\n  }\r\n  \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountrySelector);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../actions/modelActions';\r\n\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider'\r\n\r\nconst sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 80,\r\n    border: '1px solid steelblue',\r\n  }\r\n  \r\nconst railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 10,\r\n    marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: '#8B9CB6',\r\n  }\r\n\r\nexport function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: 25,\r\n          zIndex: 2,\r\n          width: 30,\r\n          height: 30,\r\n          border: 0,\r\n          textAlign: 'center',\r\n          cursor: 'pointer',\r\n          borderRadius: '50%',\r\n          backgroundColor: '#2C4870',\r\n          color: '#333',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Roboto', fontSize: 11, marginTop: -20 }}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\nfunction Track({ source, target, getTrackProps }) {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          height: 10,\r\n          zIndex: 1,\r\n          marginTop: 35,\r\n          backgroundColor: '#546C91',\r\n          borderRadius: 5,\r\n          cursor: 'pointer',\r\n          left: `${source.percent}%`,\r\n          width: `${target.percent - source.percent}%`,\r\n        }}\r\n        {...getTrackProps() /* this will set up events if you want it to be clickeable (optional) */}\r\n      />\r\n    )\r\n}\r\n\r\nfunction Tick({ tick, count }) {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            marginTop: 52,\r\n            marginLeft: -0.5,\r\n            width: 1,\r\n            height: 8,\r\n            backgroundColor: 'silver',\r\n            left: `${tick.percent}%`,\r\n          }}\r\n        />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            marginTop: 60,\r\n            fontSize: 10,\r\n            textAlign: 'center',\r\n            marginLeft: `${-(100 / count) / 2}%`,\r\n            width: `${100 / count}%`,\r\n            left: `${tick.percent}%`,\r\n          }}\r\n        >\r\n          {tick.value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\nclass YearSelector extends Component {\r\n\r\n    onChange = years => {\r\n        this.props.updateMLParams(\"start_year\", years[0])\r\n        this.props.updateMLParams(\"end_year\", years[1])\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className=\"header\">Select the years of data</div>\r\n            <Slider\r\n                rootStyle={sliderStyle}\r\n                domain={[1960, 2020]}\r\n                step={1}\r\n                mode={2}\r\n                values={[1980, 2010]}\r\n                onChange={this.onChange}\r\n            >\r\n                <Rail>\r\n                {({ getRailProps }) => (\r\n                    <div style={railStyle} {...getRailProps()} />\r\n                )}\r\n                </Rail>\r\n                <Handles>\r\n                {({ handles, getHandleProps }) => (\r\n                    <div className=\"slider-handles\">\r\n                    {handles.map(handle => (\r\n                        <Handle\r\n                        key={handle.id}\r\n                        handle={handle}\r\n                        getHandleProps={getHandleProps}\r\n                        />\r\n                    ))}\r\n                    </div>  \r\n                )}\r\n                \r\n                </Handles>\r\n                <Tracks left={false} right={false}>\r\n                {({ tracks, getTrackProps }) => (\r\n                    <div className=\"slider-tracks\">\r\n                    {tracks.map(({ id, source, target }) => (\r\n                        <Track\r\n                        key={id}\r\n                        source={source}\r\n                        target={target}\r\n                        getTrackProps={getTrackProps}\r\n                        />\r\n                    ))}\r\n                    </div>\r\n                )}\r\n                </Tracks>\r\n                <Ticks count={5 /* generate approximately 15 ticks within the domain */}>\r\n                {({ ticks }) => (\r\n                    <div className=\"slider-ticks\">\r\n                    {ticks.map(tick => (\r\n                        <Tick key={tick.id} tick={tick} count={ticks.length} />\r\n                    ))}\r\n                    </div>\r\n                )}\r\n                </Ticks>\r\n            </Slider>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// dont think we actually need this at all\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    years: [1960,2020]\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YearSelector);","import React, {Component} from 'react'\r\n\r\n// component with the optional vars for random forest classifiers\r\n\r\nclass LinearRegressionVars extends Component {\r\n\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className=\"ml-specific-div\">Linear Regression has no specific vals to specify</div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LinearRegressionVars;","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../../actions/modelActions';\r\n\r\n// component with the optional vars for random forest classifiers\r\n\r\nclass RFClassifierVars extends Component {\r\n\r\n    state = {\r\n        num_classes: 3,\r\n        tree_depth: 2\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        this.setState({[event.target.id]: parseInt(event.target.value)});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // remap state to have integers not strings\r\n        this.props.updateMLParams(\"ml_specific\", this.state)\r\n    }\r\n\r\n    render() {    \r\n        console.log(this.props)\r\n        return (\r\n        <div id='ml-specific-div'>\r\n            <form id='ml-specific-form' onSubmit={this.handleSubmit.bind(this)}>\r\n                <label>\r\n                Number of Classes &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='num_classes' type=\"number\" value={this.state.num_classes} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <label>\r\n                Max Tree Depth &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='tree_depth' type=\"number\" value={this.state.tree_depth} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <br/>\r\n                <input className='ml-specific-submit' type=\"submit\" value=\"Lock in values\" />\r\n            </form>\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      blank: 1\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RFClassifierVars);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../../actions/modelActions';\r\n\r\n// component with the optional vars for random forest classifiers\r\n\r\nclass RFClassifierVars extends Component {\r\n\r\n    state = {\r\n        num_classes: 3,\r\n        hidden_layers: 2,\r\n        nodes_hidden_layers: 5\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        this.setState({[event.target.id]: parseInt(event.target.value)});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // remap state to have integers not strings\r\n        this.props.updateMLParams(\"ml_specific\", this.state)\r\n    }\r\n\r\n    render() {    \r\n        console.log(this.props)\r\n        return (\r\n        <div id='ml-specific-div'>\r\n            <form onSubmit={this.handleSubmit.bind(this)}>\r\n                <label>\r\n                Number of Classes &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='num_classes' type=\"number\" value={this.state.num_classes} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <label>\r\n                Hidden Layers &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='tree_depth' type=\"number\" value={this.state.hidden_layers} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <label>\r\n                Nodes in the hidden layers &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='tree_depth' type=\"number\" value={this.state.nodes_hidden_layers} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <br/>\r\n                <input className='ml-specific-submit' type=\"submit\" value=\"Lock in values\" />\r\n            </form>\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      blank: 1\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RFClassifierVars);","import React, {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { updateMLParams } from '../../../actions/modelActions';\r\n\r\n// component with the optional vars for random forest classifiers\r\n\r\nclass RFClassifierVars extends Component {\r\n\r\n    state = {\r\n        num_trees: 15,\r\n        tree_depth: 2\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        this.setState({[event.target.id]: parseInt(event.target.value)});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        // remap state to have integers not strings\r\n        this.props.updateMLParams(\"ml_specific\", this.state)\r\n    }\r\n\r\n    render() {    \r\n        console.log(this.props)\r\n        return (\r\n        <div id='ml-specific-div'>\r\n            <form onSubmit={this.handleSubmit.bind(this)}>\r\n                <label>\r\n                Number of Trees &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='num_classes' type=\"number\" value={this.state.num_trees} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <label>\r\n                Max Tree Depth &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input id='tree_depth' type=\"number\" value={this.state.tree_depth} onChange={this.handleChange.bind(this)} />        \r\n                </label>\r\n                <br/>\r\n                <br/>\r\n                <input className='ml-specific-submit' type=\"submit\" value=\"Lock in values\" />\r\n            </form>\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      blank: 1\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RFClassifierVars);","import React, {Component} from 'react'\r\n\r\n// import all the model specific var selections\r\nimport LinearRegressionVars from './ml_specific/LinearRegressionVars'\r\nimport RFClassifierVars from './ml_specific/RFClassifierVars'\r\nimport NNClassifierVars from './ml_specific/NNClassifierVars'\r\nimport RFRegressionVars from './ml_specific/RFRegressionVars'\r\n\r\nclass ModelSpecificSelector extends Component {\r\n\r\n    // conditionally render based on type of ML done\r\n    renderSwitch(ml_type) {\r\n        switch(ml_type) {\r\n            case 'lin_regression':\r\n                return <LinearRegressionVars/>;\r\n\r\n            case 'rf_classifier':\r\n                return <RFClassifierVars/>;\r\n\r\n            case 'rf_regression':\r\n                    return <RFRegressionVars/>;\r\n\r\n            case 'nn_classifier':\r\n                    return <NNClassifierVars/>;\r\n\r\n            default:\r\n                return <div className=\"error-div\">No model type has been selected.</div>;\r\n        }\r\n    }\r\n\r\n    render() {    \r\n        return (\r\n        <div id='main-area'>\r\n            <div className=\"header\">Select the ML specific values</div>\r\n            {this.renderSwitch(this.props.type)}\r\n            <br/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelSpecificSelector;","import React, { Component } from 'react';\r\nimport logo from '../images/world_bank.png';\r\nimport '../css/QueryBuilder.css' \r\n\r\nimport axios from 'axios'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport MachineLearningTypeSelector from './selectors/MachineLearningTypeSelector'\r\nimport DependentVariableSelector from './selectors/DependentVariableSelector'\r\nimport IndependentVariableSelector from './selectors/IndependentVariableSelector'\r\nimport CountrySelector from './selectors/CountrySelector'\r\nimport YearSelector from './selectors/YearSelector'\r\nimport ModelSpecificParamSelector from './selectors/ModelSpecificParamSelector'\r\n\r\nimport ReactLoading from 'react-loading'\r\n\r\n// actions\r\nimport { updateMLParams, updateModel, waitingForML, notWaiting } from '../actions/modelActions';\r\nimport { showResults, showModelSearch } from '../actions/displayActions';\r\nimport { updateSearchResults } from '../actions/searchActions';\r\n\r\nclass QueryBuilder extends Component {\r\n\r\n  // ask for their name and set it here?\r\n  state = {\r\n    name: \"Jake\",\r\n  };\r\n\r\n  handleBuildClick() {\r\n    // wait for model to train\r\n    this.props.waitingForML()\r\n    axios.post('http://localhost:4000/mlSubmit', this.props.ml_params)\r\n    .then( (response) => {\r\n      // update state with model\r\n      this.props.updateModel(response.data)\r\n      this.props.notWaiting();\r\n\r\n      // change display to visualiser\r\n      this.props.showResults()\r\n    }, (error) => {\r\n        // TODO: set up how to handle errors\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  handleSearchClick = () => {\r\n    // wait for model to train\r\n    this.props.waitingForML();\r\n    axios.post('http://localhost:4000/mlSearch', this.props.ml_params)\r\n    .then( (response) => {\r\n      // update state with models\r\n      this.props.updateSearchResults(response.data)\r\n      this.props.notWaiting();\r\n\r\n      // change display to search results\r\n      this.props.showModelSearch()\r\n    }, (error) => {\r\n        // TODO: set up how to handle errors\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // runs if the mappings haven't been loaded in yet\r\n    return (\r\n      <div className=\"QueryBuilder\">\r\n        <div className='header-space-builder'/>\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"wb-logo\" alt=\"logo\" />\r\n          <p>\r\n            Hi {this.state.name}!\r\n            <br/>\r\n            Welcome to ML builder of the World Development Index dataset, from here you can <br/>\r\n            construct new ML models to be built or query the database of existing models!\r\n            <br/>\r\n          </p>\r\n\r\n            {this.props.mappings_received ?\r\n            \r\n            <div>\r\n              <div className=\"heightened-div-1\">\r\n              <MachineLearningTypeSelector/>\r\n              </div>\r\n    \r\n              <div className=\"heightened-div-2\">\r\n              <DependentVariableSelector/>\r\n              </div>\r\n              <div className=\"heightened-div-3\">\r\n              <IndependentVariableSelector/>\r\n              </div>\r\n              <CountrySelector/>\r\n              <br/>\r\n              <YearSelector/>\r\n              <br/>\r\n              <ModelSpecificParamSelector type={this.props.ml_params.ml_type}/>\r\n              <br/>\r\n              <p>When you're happy with your variable selections click one of the buttons below:</p>\r\n              { this.props.waiting_for_ml ? \r\n              <ReactLoading className=\"ml-loading\" type=\"bubbles\" height={'20%'} width={'20%'} />\r\n              :\r\n              <div className='submit-search-btns'>\r\n              <button className='btn-ml-submit' onClick={this.handleBuildClick.bind(this)}>Generate Machine Learning Model!</button>\r\n                &nbsp; &nbsp; or &nbsp; &nbsp;\r\n              <button className='btn-ml-search-submit' onClick={this.handleSearchClick}>Search for Machine Learning Models!</button>\r\n              </div>\r\n              }\r\n            </div> \r\n            :\r\n            // this is what the page will show whilst the mappings are being loaded\r\n              <p>Please wait whilst the data loads... </p>\r\n            }\r\n\r\n        </header>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    mappings_received: state.mappings.mappings_received,\r\n    ml_params: state.model.ml_params,\r\n    waiting_for_ml: state.model.waiting_for_ml,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateMLParams: (target, value) => dispatch(updateMLParams(target, value)),\r\n    updateModel: (model) => dispatch(updateModel(model)),\r\n    waitingForML: () => dispatch(waitingForML()),\r\n    notWaiting: () => dispatch(notWaiting()),\r\n    showResults: () => dispatch(showResults()),\r\n    showModelSearch: () => dispatch(showModelSearch()),\r\n    updateSearchResults: (results) => dispatch(updateSearchResults(results))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryBuilder);\r\n","export const updateSearchResults = (results) => {\r\n    return {\r\n    type: \"UPDATE_SEARCH_RESULTS\",\r\n    payload: {results}\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport '../css/Searcher.css' \r\n\r\nimport { connect } from 'react-redux';\r\n\r\n// actions\r\nimport { updateModel } from '../actions/modelActions';\r\nimport { showResults } from '../actions/displayActions';\r\n\r\n\r\nclass Searcher extends Component {\r\n\r\n  // do I need/want any internal state?\r\n  state = {\r\n    \r\n  };\r\n\r\n  handleClick = (model) => {\r\n    // on click on model make that model the active one so can be explored more closely\r\n    this.props.updateModel(model)\r\n    this.props.showResults()\r\n  }\r\n\r\n  resultsPreview = (type, model) => {\r\n      /* \r\n      function to conditionally render the results preview (Single most interesting result)\r\n      based on the type of ML it was\r\n      */\r\n      switch (type) {\r\n\r\n        case \"lin_regression\":\r\n            return <div>R^2 of: {model['R Squared'].toFixed(3)}</div>\r\n\r\n        default:\r\n            return <div></div>\r\n      }     \r\n  }\r\n\r\n\r\n  render() {\r\n    // renders all the found models (max 10)\r\n    return (\r\n      <div className=\"Searcher\">\r\n        <div className='header-space'/>\r\n        \r\n        These are the search results for:  <br/>\r\n        ML Type: <strong>{this.props.ml_mappings[this.props.query.ml_type]}</strong>, \r\n        Dependent Variable: <strong>{this.props.indicator_mappings[this.props.query.dep_var]}</strong>\r\n\r\n        <br/>\r\n        <br/>\r\n        Select a model from your search to view it more closely!\r\n        <br/>\r\n        <br/>\r\n\r\n        {/* \r\n        TODO: make it display whatever info WASNT included in the query\r\n        */}\r\n        <div>\r\n            \r\n            {this.props.search_results.map((model) => (\r\n                <div className='search-model' key={model._id} onClick={() => this.handleClick(model)}>\r\n                    Model with data from {model.countries.length} countries over {model.end_year - model.start_year} years. <br/>\r\n                    <br/>\r\n\r\n                    The independent variables are: {model.indep_vars.map( (val) => (<div>{this.props.indicator_mappings[val]}, </div>))}  <br/>\r\n                    \r\n                    {this.resultsPreview(this.props.query.ml_type, model)}\r\n                </div>\r\n            ))}\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search_results: state.search.results,\r\n    query: state.model.ml_params,\r\n    ml_mappings: state.mappings.reversed_mappings.ml_types,\r\n    country_mappings: state.mappings.reversed_mappings.countries,\r\n    indicator_mappings: state.mappings.reversed_mappings.indicators\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateModel: (model) => dispatch(updateModel(model)),\r\n    showResults: () => dispatch(showResults())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Searcher);\r\n","import React, { Component } from 'react';\nimport './css/App.css';\n\nimport axios from 'axios';\n\nimport { connect } from 'react-redux';\n\nimport Header from './components/Header';\nimport ResultsVisualiser from './components/ResultsVisualiser';\nimport QueryBuilder from './components/QueryBuilder';\nimport Searcher from './components/Searcher';\n\n// actions\nimport { addMappings, addRevMappings, waitingMappings, receivedMappings } from './actions/mappingActions';\n\nclass App extends Component {\n\n  // get the data on the countries/variables/yrs etc\n  componentDidMount() {\n    this.fetchMappings();\n  }\n\n  fetchMappings() {\n    this.props.waitingMappings()\n    axios.get('http://localhost:4000/mappings')\n    .then( (response) => {\n      // dispatch the action to update mappings into store\n      this.props.addMappings({\n        \"countries\": response.data.countries,\n        \"indicators\": response.data.indicators,\n        \"ml_types\": response.data.mlTypes\n      })\n    })\n\n    axios.get('http://localhost:4000/revMappings')\n    .then( (response) => {\n      // dispatch the action to update mappings into store\n      this.props.addRevMappings({\n        \"countries\": response.data.revCountries,\n        \"indicators\": response.data.revIndicators,\n        \"ml_types\": response.data.revMLTypes\n      })\n    })\n    .then( () => {\n      this.props.receivedMappings()\n    })\n  }\n\n  // conditionally render -- change this so we can just tab between them or something?\n  renderSwitch(display) {\n    switch(display) {\n        case 'query':\n            return <QueryBuilder/>;\n\n        case 'results':\n            return <ResultsVisualiser/>;\n\n        case 'modelSearch':\n            return <Searcher/>;\n\n        default:\n            return <div className=\"error-div\">\"There was an error displaying this page.\"</div>;\n    }\n}\n\n  render() {\n    // runs if the mappings haven't been loaded in yet\n    return (\n      <div className=\"App\">\n        <Header/>\n        <div className=\"Background\"></div>\n          {this.renderSwitch(this.props.display)}\n        <br/>\n        <div className='footer-div'>App made by Jake Frazer</div>\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    mappings: state.mappings.mappings,\n    mappings_received: state.mappings.mappings_received,\n    model_received: state.model.model_received,\n    display: state.display.display\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addMappings: (mappings) => dispatch(addMappings(mappings)),\n    addRevMappings: (mappings) => dispatch(addRevMappings(mappings)),\n    waitingMappings: () => dispatch(waitingMappings()),\n    receivedMappings: () => dispatch(receivedMappings())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const addMappings = (mappings) => {\r\n    return {\r\n    type: \"ADD_MAPPINGS\",\r\n    payload: mappings\r\n}}\r\n\r\nexport const addRevMappings = (mappings) => {\r\n    return {\r\n    type: \"ADD_REVERSED_MAPPINGS\",\r\n    payload: mappings\r\n}}\r\n\r\nexport const waitingMappings = () => ({\r\n    type: \"WAITING_MAPPINGS\"\r\n})\r\n\r\nexport const receivedMappings = () => ({\r\n    type: \"RECEIVED_MAPPINGS\"\r\n})\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    mappings: {},\r\n    reversed_mappings: {},\r\n    mappings_received: null\r\n}\r\n\r\nconst mappingReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n    case 'ADD_MAPPINGS':\r\n      return { ...state, mappings: action.payload };\r\n\r\n    case 'ADD_REVERSED_MAPPINGS':\r\n      return { ...state, reversed_mappings: action.payload };\r\n\r\n    case 'RECEIVED_MAPPINGS':\r\n      return { ...state, mappings_received: true};\r\n\r\n    case 'WAITING_MAPPINGS':\r\n      return { ...state, mappings_received: false};\r\n\r\n    default:\r\n      return state;\r\n  } \r\n};\r\n\r\nexport default mappingReducer;","const initialState = {\r\n    ml_params: {\r\n        \"ml_type\": \"\", \r\n        \"dep_var\": \"NY.ADJ.NNTY.CD\", \r\n        \"indep_vars\": [\"NY.ADJ.AEDU.GN.ZS\", \"SE.SEC.UNER.LO.ZS\"],\r\n        \"countries\": [\"ARB\", \"UKR\", \"USA\", \"GBR\", \"BGR\", \"SPA\", \"NOR\", \"FRO\", \"MEX\"],\r\n        \"start_year\": 1980,\r\n        \"end_year\": 2010,\r\n        \"ml_specific\": {} \r\n      },\r\n      name: \"Jake\",\r\n      waiting_for_ml: false,\r\n      model_received: false\r\n}\r\n\r\nconst modelReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n    case 'CHANGE_ML_PARAMS':\r\n      return { \r\n        ...state, \r\n        ml_params: { \r\n            ...state.ml_params, \r\n            [action.payload.target]: action.payload.value \r\n        } \r\n    };\r\n\r\n    case 'UPDATE_MODEL':\r\n        return { \r\n            ...state, \r\n            results: action.payload.results, \r\n            type: action.payload.type, \r\n            model_received: true \r\n        };\r\n\r\n    case 'WAITING_FOR_MODEL':\r\n        return { ...state, waiting_for_ml: true };\r\n\r\n    case 'NOT_WAITING':\r\n        return { ...state, waiting_for_ml: false };\r\n    \r\n    case 'ML_TYPE_CHANGE':\r\n        return { \r\n            ...state, \r\n            ml_params: { \r\n                ...state.ml_params, \r\n                ml_specific: {}\r\n            } \r\n        };\r\n\r\n    default:\r\n      return state;\r\n  } \r\n};\r\n\r\nexport default modelReducer;","const initialState = {\r\n    display: 'query'\r\n}\r\n\r\nconst displayReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n    case 'SHOW_QUERY_BUILDER':\r\n        return { ...state, display: 'query' };\r\n\r\n    case 'SHOW_RESULTS':\r\n        return { ...state, display: 'results' };\r\n\r\n    case 'SHOW_MODEL_SEARCH':\r\n            return { ...state, display: 'modelSearch' };\r\n\r\n    default:\r\n      return state;\r\n  } \r\n};\r\n\r\nexport default displayReducer;","const initialState = {\r\n    query: {},\r\n    results: []\r\n}\r\n\r\nconst searchReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n    case 'UPDATE_SEARCH_RESULTS':\r\n        return { ...state, results: action.payload.results };\r\n\r\n    default:\r\n      return state;\r\n  } \r\n};\r\n\r\nexport default searchReducer;","import { combineReducers } from 'redux';\r\n\r\n// import all the reducers into here\r\nimport mappingReducer from './mappingReducer';\r\nimport modelReducer from './modelReducer';\r\nimport displayReducer from './displayReducer';\r\nimport searchReducer from './searchReducer';\r\n\r\nexport default combineReducers({\r\n mappings: mappingReducer,\r\n model: modelReducer,\r\n display: displayReducer,\r\n search: searchReducer\r\n});","import React from 'react'\r\nimport { createStore } from 'redux'\r\nimport rootReducer from './reducers/rootReducer'\r\n\r\n// can put middleware in here\r\nconst store = createStore(rootReducer)\r\n\r\nconsole.log(\"store state is:   \")\r\nconsole.log(store.getState())\r\n\r\nexport default store ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}